##Sample tpserver-cpp config file
## This file outlines the configuration options and syntax that can be used to
## configure tpserver-cpp

##About this file.
## If you use this file directly as a config file for tpserver-cpp, the defaults will
## be used.
## If you uncomment out the lines beginning with a single "#" character, you
## will still get the defaults.
## Lines starting with two "#" characters is the documention for this file.

##SYNTAX
## Comments start with a "#" and go to the end of the line.
## The configuration lines have the format "<key> = <value>"
## Keys have a restricted set of characters.
## Values can be inclosed in single (') or double (") quotes, or not enclosed
## at all if the value has no spaces or quotes.
## The keys and possible (and default) values are outlined below.
## The last instance of the key in the file is used.


##Game settings

## ruleset - sets which ruleset to load.
## Setting this to the ruleset wanted will automatically load the ruleset named.
## If it is not set, no ruleset is loaded.
## Example: ruleset = minisec
#ruleset =

## persistence - set which persistence method to use.
## Automatically loads the named persistence method. If it is not set, the default
## in memory only persistence method is set.
## Example: persistence = tpmysql
#persistence =

## tpscheme - sets which TpScheme implementation to use.
## If set, loads the named TpScheme implementation. If not set or set to "auto"
## then an available implementation will be loaded.
## Example: tpscheme = tpmzscheme
## Example: tpscheme = tpguile
#tpscheme = auto

## game_load - automatically load the game.
## If set to "yes" then the game is automatically loaded ready to be started.
## In practice, at least ruleset above must be set.
#game_load = no

## game_start - automatically start the game.
## If set to "yes" then the game is automatically started and the end of turn
## timer set.
## In practice, game_load must be "yes" and succeed. You will want to set this
## configuration option once the server is running a game so that manual interaction
## is not required to get it running again after stopping the server. You will want to
## set network_start below to "yes" as well.
#game_start = no

## network_start - automatically start the network subsystem.
## If set to "yes" then the network subsystem is started and the listening sockets set.
## In practice, game_start must be "yes" and succeed. You will want to set this
## configuration option once the server is running a game so that manual interaction
## is not required to get it running again after stopping the server.
#network_start = no

## add_players - allows new players to join the game
## If set to "yes" then players that register using Account frames will join the
## game. When not set to "yes" no new players will join the game. The default
## is no, to prevent players joining until the game is ready.
#add_players = no

## autoadd_players - chooses weather new players are automatically created
##                               at login.
## If this setting is set to "yes" and add_players setting is set to "yes",
## if a player trys to login with a player name that
## is not currently know, a new player is created and added to the game. This
## is a method of self registersation. If playing a closed game, or the players
## are all set up, set to "no"
#autoadd_players = no


##Logging settings

## log_level - sets the level of logging done.
## This can be used to control the amount of output on the console.
## The value is an integer, coresponding to the lowest level that is logged:
## 0 - Debug output (default)
## 1 - Informational output (connects, disconnects, notices, etc)
## 2 - Warning output (Some types of failures, non-fatal, but possibly unfair)
## 3 - Error output (Errors, mostly fatal)
#log_level = 0

## log_colour - set weather to use colour for logging output to the terminal
## If logging to a terminal (command line/console), it maybe possible to use
## colour to make info, warning and error messages stand out. Most linux
## consoles support colour.  Colours used are:
## Red for errors
## Yellow for warnings
## Green for Info
## Standard console colour for debug.
## Only the message type is coloured (ie the "< Info  >" bit), the message
## itself is always in the standard console colour.
## To turn on colour, set to "yes"
#log_colour = no

## log_console - If you want to log to the console, this needs to be
## defined to "yes"
## Example: log_console = yes
#log_console = no

## log_file - To log to a file, define this to "yes" and set the logfile_name
## below.
## Example: log_file = yes
#log_file = no

## logfile_name - the file name to log to if file logging is enabled.
## Defaults to /var/log/tpserver-cpp.log.
#logfile_name = /var/log/tpserver-cpp.log

## log_syslog - As with console log, define this to yes to turn on logging to syslog.
## Example: log_syslog = yes
#log_syslog = no

## config_file - sets the config file to read.
## Sets the configuration file to read. Not exactly useful for inside the config
## file, but can be set from the command line.
## Defaults to /etc/tpserver-cpp/tpserver.conf
## STRONGLY recomend you *don't* uncomment the line below.
#config_file = /etc/tpserver-cpp/tpserver.conf


##Network settings

## tp_addr - the address to listen on for the tp (tcp, no tls) socket to listen on.
## Defaults to empty, empty is all addresses available. Set if you only want the
## tp socket to listen on a particular address.
#tp_addr =

## tp_port - sets the port the tp (tcp, no tls) socket listens on.
## Defaults to 0, which makes it listen on the default port (6923).
#tp_port = 0

## x509_tls - set if x509 certificate is to be used with TLS ports (tps and https).
## Set to "yes" if you have an x509 certificate you want to use. If you set this
## to yes, you should set x509_trust_file, x509_cert_file and x509_key_file.
#x509_tls = no

## x509_trust_file - set the trust file (CA-certificate) to use.
## No default.
#x509_trust_file =

## x509_cert_file - set the cert file (our certificate) to use.
## No default.
#x509_cert_file =

## x509_key_file - set the key file (our private key for our cert) to use.
## No default.
#x509_key_file =

## tps - selects weather tps socket is started when network is started.
## Only effective when TLS (gnutls) is configured. Defaults to no. Set
## to "yes" to have tps socket start.
#tps = no

## tps_addr - the address to listen on for the tps (tcp, tls) socket to listen on.
## Defaults to empty, empty is all addresses available. Set if you only want the
## tps socket to listen on a particular address.
#tps_addr =

## tps_port - sets the port the tp (tcp, tls) socket listens on.
## Defaults to 0, which makes it listen on the default port (6924).
#tps_port = 0

## https - selects weather https tunneling socket is started when network is
##             started.
## Only effective when TLS (gnutls) is configured. Defaults to no. Set
## to "yes" to have https socket start.
#https = no

## https_addr - the address to listen on for the https (https tunneling) socket
##                      to listen on.
## Defaults to empty, empty is all addresses available. Set if you only want the
## https socket to listen on a particular address.
#https_addr =

## https_port - sets the port the https (https tunneling) socket listens on.
## Defaults to 0, which makes it listen on the default port (443).
#https_port = 0

## http - selects weather http tunneling socket is started when network is
##             started.
## Defaults to no. Set to "yes" to have http socket start.
#http = no

## http_addr - the address to listen on for the http (http tunneling) socket
##                      to listen on.
## Defaults to empty, empty is all addresses available. Set if you only want the
## http socket to listen on a particular address.
#http_addr =

## http_port - sets the port the http (http tunneling) socket listens on.
## Defaults to 0, which makes it listen on the default port (80).
#http_port = 0


## Also see the individual module sample.conf files to see what config entries they support.
